name: Builder

env:
  BUILD_ARGS: "--test"
  MONITORED_FILES: "build.yaml Dockerfile"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5.0.0

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        run: |
          shopt -s nullglob
          addons=()
          for dir in */; do
            addons+=("${dir%/}")
          done
          echo "addons=${addons[*]}" >> $GITHUB_OUTPUT

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            for file in ${{ env.MONITORED_FILES }}; do
              if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                  changed_addons+=("\"${addon}\",");
                fi
              fi
            done
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
            echo "changed=false" >> $GITHUB_OUTPUT;
          fi

  build:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v5.0.0
      
      - name: Manually install yq
        run: |
          curl -L https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -o ./yq
          chmod +x ./yq
          echo "PATH=$(pwd):$PATH" >> $GITHUB_ENV
          ./yq --version

      - name: Get information
        id: info
        run: |
          image=$(yq eval '.image' ./${{ matrix.addon }}/build.yaml)
          arch=$(yq eval '.arch' ./${{ matrix.addon }}/build.yaml | yq eval 'to_entries | map(.value)' - | tr '\n' ' ')
          version=$(yq eval '.version' ./${{ matrix.addon }}/build.yaml)
          echo "image=$image" >> $GITHUB_OUTPUT
          echo "arch=$arch" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.image }}" == "null" ]]; then
            echo "Image property is not defined, skipping build"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          else
            build_arch=false
            current_arch=""
            for arch_item in ${{ steps.info.outputs.arch }}; do
              if [[ "$arch_item" == "${{ matrix.arch }}" ]]; then
                current_arch="$arch_item"
                build_arch=true
                break
              fi
            done
            if [[ "$build_arch" == "true" ]]; then
              echo "build_arch=true" >> $GITHUB_OUTPUT;
              image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f2 | sed "s#{arch}#$current_arch#")
              echo "image=$image" >> $GITHUB_OUTPUT;
              if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                  echo "BUILD_ARGS=" >> $GITHUB_ENV;
              fi
            else
              echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
              echo "build_arch=false" >> $GITHUB_OUTPUT;
            fi
          fi

      - name: Login to Docker Hub
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.addon }}
          file: ./${{ matrix.addon }}/Dockerfile
          platforms: linux/${{ matrix.arch }}
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ steps.check.outputs.image }}:latest
            ${{ vars.DOCKERHUB_USERNAME }}/${{ steps.check.outputs.image }}:${{ steps.info.outputs.version }}
          push: ${{ env.BUILD_ARGS != '--test' }}

      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GitHub Packages
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.addon }}
          file: ./${{ matrix.addon }}/Dockerfile
          platforms: linux/${{ matrix.arch }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.check.outputs.image }}:${{ matrix.arch }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.check.outputs.image }}:latest-${{ matrix.arch }}
          push: ${{ env.BUILD_ARGS != '--test' }}